/// <binding BeforeBuild='jshint' ProjectOpened='watch' />
(function () {
    'use strict';

    // Include Gulp & tools we'll use
    var gulp = require('gulp'),
        util = require('gulp-util'),
        $ = require('gulp-load-plugins')(),
        del = require('del'),
        ftp = require('vinyl-ftp'),
        fs = require('fs'),
        run = require('run-sequence'),
        LessPluginAutoPrefix = require('less-plugin-autoprefix'),
        browserSync = require('browser-sync'),
        historyApiFallback = require('connect-history-api-fallback'),
        pkg = require('./package.json'),
        config = {};

    var AUTOPREFIXER_BROWSERS = [
        'ie >= 9',
        'ie_mob >= 9',
        'ff >= 30',
        'chrome >= 34',
        'safari >= 7',
        'opera >= 23',
        'ios >= 7',
        'android >= 4.4',
        'bb >= 10'
    ];

    var autoprefix = new LessPluginAutoPrefix({ browsers: AUTOPREFIXER_BROWSERS });

    gulp.task('configure', function () {
        return configure(util.env);
    });

    gulp.task('deploy', ['build'], deploy);

    // #region default:build
    gulp.task('default:build', function (done) {
        configure({ solution: '550c26a864617400a40f0000', folder: 'default' });
        run('build', done);
    });

    gulp.task('default:deploy', ['default:build', 'deploy']);
    gulp.task('default:serve', ['default:build', 'serve']);
    // #endregion

    gulp.task('watch', function () {
        gulp.watch(['gulpfile.js', 'app/**/*.js', 'themes/**/*.js'], ["run:jshint"]);
        gulp.watch(['app/less/**.less', 'themes/**/less/**.less'], ["build:less"]);
    });

    gulp.task('run:jshint', function () {
        return gulp.src(['app/scripts/**/*.js', 'app/controllers/**/*.js', 'app/directives/**/*.js', 'gulpfile.js', 'themes/**/*.js'])
                .pipe($.jshint.extract())
                .pipe($.jshint())
                .pipe($.jshint.reporter('jshint-stylish'))
                .pipe($.count('run:jshint: ## files were processed.'));
    });

    // Clean output directory
    gulp.task('clean', function () {
        return del(['.tmp', config.destination]);
    });

    // Copy all assets to output folder
    gulp.task('copy', ['clean'], function () {
        return gulp.src(['app/assets/**'])
                .pipe(gulp.dest(config.destination + '/assets/'))
                .pipe($.count('copy: ## files were copied.'))
                .pipe($.size({ title: 'copied' }));
    });

    //Compiling less files in to one css file.
    gulp.task('build:less', function () {
        var theme = config.theme || 'default',
            destination = config.solution > '' ? '.tmp/css/' : 'app/css';

        return gulp.src('themes/' + theme + '/less/theme.less')
            .pipe($.plumber({}))
            .pipe($.sourcemaps.init())
            .pipe($.less({ plugins: [autoprefix] }))
            .pipe($.header('/* This code was generated by a tool. */\r\n\r\n'))
            .pipe($.sourcemaps.write('.'))
            .pipe(gulp.dest(destination))
            .pipe($.count('build:less: ## files where processed and copied.'));
    });

    //Minifies the css file created from less files.
    gulp.task('minify:css', ['build:less'], function () {
        return gulp.src('.tmp/css/theme.css')
            .pipe($.plumber({}))
            .pipe($.cleanCss())
            .pipe($.header('/* This code was generated by a tool. */\r\n\r\n'))
            .pipe($.rename({ suffix: '.min' }))
            .pipe(gulp.dest(config.destination + '/assets/css'))
            .pipe($.count('minify:css: ## files where processed and copied.'));
    });

    //Makes a ng-template cache from html templates
    gulp.task('build:ng-templates', function () {
        return gulp.src(['app/**/*.tpl.html'])
            .pipe($.minifyHtml({ empty: true }))
            .pipe($.angularTemplatecache(
                 config.templateCache.file,
                 config.templateCache.options
             ))
            .pipe(gulp.dest('.tmp/'))
            .pipe($.size({ title: 'ng-templates' }));
    });

    //
    gulp.task('build', ['configure', 'clean', 'copy', 'build:less', 'minify:css', 'build:ng-templates'], build);

    gulp.task('serve', function () {
        var routes = {};
        routes["/" + config.folder] = config.destination;
        return browserSync({
            port: 5000,
            startPath: "/" + config.folder,
            server: {
                baseDir: [config.destination],
                routes: routes,
                directory: true
            },
            middleware: [historyApiFallback()]
        });
    });

    function build() {
        return gulp.src(['app/**/*.html', '!**/*.tpl.html'])
           .pipe($.htmlReplace({
               'base': '<base href="/' + config.folder + '/">',
               'theme': 'assets/css/theme.min.css',
               'MapsIndoors': '//d3jdh4j7ox95tn.cloudfront.net/mapsindoors/js/sdk/MapsIndoors-' + pkg['sdk-version'] + '.min.gz.js?solutionId=' + config.solution
           }))
           .pipe($.inject(gulp.src(['themes/' + config.theme + '/js/config.js'], { read: false }), { name: 'inject:theming_provider', relative: true }))
           .pipe($.inject(gulp.src(['.tmp/ng-templates.js'], { read: false }), { name: 'inject:templates', relative: true }))
           .pipe($.useref())
           .pipe($.if('*.js', $.ngAnnotate()))
           .pipe($.if('*.js', $.uglify({ preserveComments: 'some' })))
           .pipe($.injectVersion())
           .pipe(gulp.dest(config.destination))
           .pipe($.size({ title: 'compiled' }));
    }

    function deploy() {
        var conn = ftp.create({
            host: '',
            user: '',
            password: '',
            parallel: 10,
            log: util.log
        }),
        src = 'release/' + config.folder + '/' + pkg.version + '/**';

        try {
            fs.accessSync('release/' + config.folder + '/' + pkg.version);
            return gulp.src(src, { buffer: false })
                .pipe(conn.dest('/site/wwwroot/' + config.folder));
        } catch (e) {
            console.log('Folder "' + config.folder + '" doesn\'t exists!', e);
        }
    }

    function configure(args) {
        if (!config || !config.createdAt) {
            config = {
                theme: args.theme || 'default',
                solution: args.solution || '',
                folder: args.folder || '',
                destination: args.destination || 'release/' + args.folder + '/' + pkg.version + '/',
                templateCache: {
                    file: 'ng-templates.js',
                    options: {
                        module: 'MapsIndoors',
                        standAlone: true
                    }
                },
                createdAt: Date.now()
            };
        }

        return function () { };
    }
}());
